// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cs.ut.domain;

import cs.ut.domain.Plant;
import cs.ut.domain.PlantDataOnDemand;
import cs.ut.domain.PurchaseOrderUpdate;
import cs.ut.domain.PurchaseOrderUpdateDataOnDemand;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PurchaseOrderUpdateDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PurchaseOrderUpdateDataOnDemand: @Component;
    
    private Random PurchaseOrderUpdateDataOnDemand.rnd = new SecureRandom();
    
    private List<PurchaseOrderUpdate> PurchaseOrderUpdateDataOnDemand.data;
    
    @Autowired
    PlantDataOnDemand PurchaseOrderUpdateDataOnDemand.plantDataOnDemand;
    
    public PurchaseOrderUpdate PurchaseOrderUpdateDataOnDemand.getNewTransientPurchaseOrderUpdate(int index) {
        PurchaseOrderUpdate obj = new PurchaseOrderUpdate();
        setEndDate(obj, index);
        setPlant(obj, index);
        setPurchaseOrderId(obj, index);
        setStartDate(obj, index);
        setTotalCost(obj, index);
        return obj;
    }
    
    public void PurchaseOrderUpdateDataOnDemand.setEndDate(PurchaseOrderUpdate obj, int index) {
        Date endDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setEndDate(endDate);
    }
    
    public void PurchaseOrderUpdateDataOnDemand.setPlant(PurchaseOrderUpdate obj, int index) {
        Plant plant = plantDataOnDemand.getRandomPlant();
        obj.setPlant(plant);
    }
    
    public void PurchaseOrderUpdateDataOnDemand.setPurchaseOrderId(PurchaseOrderUpdate obj, int index) {
        Long purchaseOrderId = new Integer(index).longValue();
        obj.setPurchaseOrderId(purchaseOrderId);
    }
    
    public void PurchaseOrderUpdateDataOnDemand.setStartDate(PurchaseOrderUpdate obj, int index) {
        Date startDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStartDate(startDate);
    }
    
    public void PurchaseOrderUpdateDataOnDemand.setTotalCost(PurchaseOrderUpdate obj, int index) {
        BigDecimal totalCost = BigDecimal.valueOf(index);
        obj.setTotalCost(totalCost);
    }
    
    public PurchaseOrderUpdate PurchaseOrderUpdateDataOnDemand.getSpecificPurchaseOrderUpdate(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        PurchaseOrderUpdate obj = data.get(index);
        Long id = obj.getId();
        return PurchaseOrderUpdate.findPurchaseOrderUpdate(id);
    }
    
    public PurchaseOrderUpdate PurchaseOrderUpdateDataOnDemand.getRandomPurchaseOrderUpdate() {
        init();
        PurchaseOrderUpdate obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return PurchaseOrderUpdate.findPurchaseOrderUpdate(id);
    }
    
    public boolean PurchaseOrderUpdateDataOnDemand.modifyPurchaseOrderUpdate(PurchaseOrderUpdate obj) {
        return false;
    }
    
    public void PurchaseOrderUpdateDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = PurchaseOrderUpdate.findPurchaseOrderUpdateEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'PurchaseOrderUpdate' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<PurchaseOrderUpdate>();
        for (int i = 0; i < 10; i++) {
            PurchaseOrderUpdate obj = getNewTransientPurchaseOrderUpdate(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
